// Simple Node.js + Express + Socket.IO backend    
    const friendship = await Friendship.sendRequest(req.user._id, targetUser._id);
    console.log(`âœ… Friend request sent: ${req.user.username} -> ${targetUser.username}`);
    res.json({ message: 'Friend request sent successfully' });
  } catch (error) {real-time chat

import express from 'express';
import http from 'http';
import { Server } from 'socket.io';
import cors from 'cors';
import { registerUser, loginUser, auth, getProfile, updateProfile } from './auth.js';
import User from './models/User.mjs';
import Friendship from './models/Friendship.mjs';
import Message from './models/Message.mjs';
import Conversation from './models/Conversation.mjs';

const app = express();
const server = http.createServer(app);
const io = new Server(server, {
  cors: {
    origin: '*',
    methods: ['GET', 'POST']
  }
});

app.use(cors());
app.use(express.json());

// User registration
app.post('/api/register', registerUser);
// User login
app.post('/api/login', loginUser);
// Profile routes
app.get('/api/profile', auth, getProfile);
app.put('/api/profile', auth, updateProfile);

// Friendship routes
// Send friend request
app.post('/api/friends/request', auth, async (req, res) => {
  console.log(`ðŸ“¨ Friend request: ${req.user.username} -> ${req.body.username}`);
  try {
    const { username } = req.body;
    const targetUser = await User.findOne({ username });
    
    if (!targetUser) {
      return res.status(404).json({ message: 'User not found' });
    }
    
    if (targetUser._id.toString() === req.user._id.toString()) {
      return res.status(400).json({ message: 'Cannot send friend request to yourself' });
    }
    
    const friendship = await Friendship.sendRequest(req.user._id, targetUser._id);
    console.log(`âœ… Friend request sent: ${req.user.username} -> ${targetUser.username}`);
    res.json({ message: 'Friend request sent', friendship });
  } catch (error) {
    console.error('Error in POST /api/friends/request:', error);
    if (error.message === 'Friendship request already exists') {
      return res.status(400).json({ message: 'Friend request already exists' });
    }
    res.status(500).json({ message: 'Server error', error: error.message });
  }
});

// Accept friend request
app.post('/api/friends/accept', auth, async (req, res) => {
  try {
    const { senderId } = req.body;
    
    const friendship = await Friendship.findOne({
      $or: [
        { user_id_1: senderId, user_id_2: req.user._id },
        { user_id_1: req.user._id, user_id_2: senderId }
      ],
      status: 'pending'
    });
    
    if (!friendship) {
      return res.status(404).json({ message: 'Friend request not found' });
    }
    
    friendship.status = 'accepted';
    await friendship.save();
    
    res.json({ message: 'Friend request accepted', friendship });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
});

// Reject friend request
app.post('/api/friends/reject', auth, async (req, res) => {
  try {
    const { senderId } = req.body;
    
    const friendship = await Friendship.findOneAndDelete({
      $or: [
        { user_id_1: senderId, user_id_2: req.user._id },
        { user_id_1: req.user._id, user_id_2: senderId }
      ],
      status: 'pending'
    });
    
    if (!friendship) {
      return res.status(404).json({ message: 'Friend request not found' });
    }
    
    res.json({ message: 'Friend request rejected' });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
});

// Get pending friend requests
app.get('/api/friends/requests', auth, async (req, res) => {
  try {
    const friendRequests = await Friendship.find({
      $or: [
        { user_id_1: req.user._id, status: 'pending' },
        { user_id_2: req.user._id, status: 'pending' }
      ]
    }).populate('user_id_1 user_id_2', 'username firstName avatar');
    
    // Format the response to show who sent the request
    const formattedRequests = friendRequests.map(request => ({
      id: request._id,
      sender: request.requester.toString() === req.user._id.toString() ? 
        request.user_id_2 : request.user_id_1,
      type: request.requester.toString() === req.user._id.toString() ? 
        'sent' : 'received',
      createdAt: request.createdAt
    }));
    
    res.json(formattedRequests);
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
});

// Get friends list
app.get('/api/friends', auth, async (req, res) => {
  console.log(`ðŸ‘¥ Getting friends list for: ${req.user.username}`);
  try {
    const friendships = await Friendship.find({
      $or: [
        { user_id_1: req.user._id, status: 'accepted' },
        { user_id_2: req.user._id, status: 'accepted' }
      ]
    }).populate('user_id_1 user_id_2', 'username firstName avatar online lastSeen');
    
    const friends = friendships.map(friendship => {
      const friend = friendship.user_id_1._id.toString() === req.user._id.toString() ? 
        friendship.user_id_2 : friendship.user_id_1;
      return friend;
    });
    
    console.log(`âœ… Found ${friends.length} friends for ${req.user.username}`);
    res.json(friends);
  } catch (error) {
    console.error('Error in GET /api/friends:', error);
    res.status(500).json({ message: 'Server error', error: error.message });
  }
});

// Message and Conversation routes
// Get or create conversation between two users
app.get('/api/conversations/:friendId', auth, async (req, res) => {
  try {
    const { friendId } = req.params;
    const userId = req.user._id;
    
    // Find existing conversation
    let conversation = await Conversation.findOne({
      participants: { $all: [userId, friendId] }
    });
    
    // Create new conversation if doesn't exist
    if (!conversation) {
      conversation = new Conversation({
        participants: [userId, friendId]
      });
      await conversation.save();
    }
    
    res.json(conversation);
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
});

// Get messages for a conversation
app.get('/api/conversations/:conversationId/messages', auth, async (req, res) => {
  try {
    const { conversationId } = req.params;
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 50;
    const skip = (page - 1) * limit;
    
    // Verify user is participant in conversation
    const conversation = await Conversation.findById(conversationId);
    if (!conversation || !conversation.participants.includes(req.user._id)) {
      return res.status(403).json({ message: 'Access denied' });
    }
    
    const messages = await Message.find({ conversationId })
      .populate('sender', 'username firstName avatar')
      .sort({ timestamp: -1 })
      .skip(skip)
      .limit(limit);
    
    res.json(messages.reverse()); // Return in chronological order
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
});

// Send a message
app.post('/api/conversations/:conversationId/messages', auth, async (req, res) => {
  try {
    const { conversationId } = req.params;
    const { content } = req.body;
    
    if (!content || !content.trim()) {
      return res.status(400).json({ message: 'Message content is required' });
    }
    
    // Verify user is participant in conversation
    const conversation = await Conversation.findById(conversationId);
    if (!conversation || !conversation.participants.includes(req.user._id)) {
      return res.status(403).json({ message: 'Access denied' });
    }
    
    const message = new Message({
      conversationId,
      sender: req.user._id,
      content: content.trim()
    });
    
    await message.save();
    await message.populate('sender', 'username firstName avatar');
    
    // Emit message to other participants via Socket.IO
    const recipientId = conversation.participants.find(p => p.toString() !== req.user._id.toString());
    io.to(`user_${recipientId}`).emit('new_message', {
      conversationId,
      message: {
        _id: message._id,
        content: message.content,
        sender: message.sender,
        timestamp: message.timestamp,
        read: message.read
      }
    });
    
    res.status(201).json(message);
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
});

// Mark messages as read
app.put('/api/conversations/:conversationId/messages/read', auth, async (req, res) => {
  try {
    const { conversationId } = req.params;
    
    // Verify user is participant in conversation
    const conversation = await Conversation.findById(conversationId);
    if (!conversation || !conversation.participants.includes(req.user._id)) {
      return res.status(403).json({ message: 'Access denied' });
    }
    
    // Mark all messages in conversation as read (except user's own messages)
    await Message.updateMany(
      { 
        conversationId, 
        sender: { $ne: req.user._id },
        read: false 
      },
      { read: true }
    );
    
    res.json({ message: 'Messages marked as read' });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
});

io.on('connection', (socket) => {
  console.log(`ðŸ”Œ User connected: ${socket.id}`);

  // Handle user authentication and set online status
  socket.on('user_connect', async (userId) => {
    try {
      socket.userId = userId;
      socket.join(`user_${userId}`); // Join user-specific room
      
      await User.findByIdAndUpdate(userId, { 
        online: true, 
        lastSeen: new Date() 
      });
      console.log(`ðŸŸ¢ User online: ${userId}`);
      
      // Notify friends that user is online
      socket.broadcast.emit('user_status_change', { userId, online: true });
    } catch (error) {
      console.error('Error setting user online:', error);
    }
  });

  // Handle joining conversation rooms
  socket.on('join_conversation', (conversationId) => {
    socket.join(`conversation_${conversationId}`);
    console.log(`ðŸ’¬ User ${socket.userId} joined conversation`);
  });

  // Handle leaving conversation rooms
  socket.on('leave_conversation', (conversationId) => {
    socket.leave(`conversation_${conversationId}`);
    console.log(`ðŸ‘‹ User ${socket.userId} left conversation`);
  });

  // Handle typing indicators
  socket.on('typing_start', (data) => {
    socket.to(`conversation_${data.conversationId}`).emit('user_typing', {
      userId: socket.userId,
      conversationId: data.conversationId,
      typing: true
    });
  });

  socket.on('typing_stop', (data) => {
    socket.to(`conversation_${data.conversationId}`).emit('user_typing', {
      userId: socket.userId,
      conversationId: data.conversationId,
      typing: false
    });
  });

  socket.on('disconnect', async () => {
    console.log(`ðŸ”Œ User disconnected: ${socket.id}`);
    
    // Set user offline when disconnected
    if (socket.userId) {
      try {
        await User.findByIdAndUpdate(socket.userId, { 
          online: false, 
          lastSeen: new Date() 
        });
        console.log(`ðŸ”´ User offline: ${socket.userId}`);
        
        // Notify friends that user is offline
        socket.broadcast.emit('user_status_change', { userId: socket.userId, online: false });
      } catch (error) {
        console.error('Error setting user offline:', error);
      }
    }
  });
});

const PORT = 3001;
server.listen(PORT, () => {
  console.log(`ðŸš€ Chat Server running on port ${PORT}`);
});
